stateformulas = c('~1', '~1', '~Fcon_PA'),
maxOrder = 2,
data = mdata)
fit_Fmix_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fmix_PA'),
maxOrder = 2,
data = mdata)
fit_imperv <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~imperv'),
maxOrder = 2,
data = mdata)
fit_LFT_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~LFT_dist'),
maxOrder = 2,
data = mdata)
fit_POP_mean <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_mean'),
maxOrder = 2,
data = mdata)
fit_POP_median <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_median'),
maxOrder = 2,
data = mdata)
fit_hum <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~total_freq_humans'),
maxOrder = 2,
data = mdata)
fit <- fitList(fit_null, fit_WVF_dist, fit_WVF_PA, fit_Fdec_PA, fit_Fcon_PA,
fit_Fmix_PA, fit_imperv, fit_LFT_dist, fit_POP_mean,
fit_POP_median, fit_hum)
modSel(fit)
sink("frabbit_modSel_100.txt")
print(modSel(fit))
sink()
summary(fit_WVF_PA)
fit_frabbit_100 <- fit_null #is best model
sink("frabbit_fit_100_null.txt")
print(summary(fit_frabbit_100))
sink()
View(fr500)
View(cov500)
View(b500)
View(fox)
mdata <- fr500
#first selection
fit_null <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~1'),
maxOrder = 2,
data = mdata)
fit_WVF_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_dist'),
maxOrder = 2,
data = mdata)
fit_WVF_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_PA'),
maxOrder = 2,
data = mdata)
fit_Fdec_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fdec_PA'),
maxOrder = 2,
data = mdata)
fit_Fcon_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fcon_PA'),
maxOrder = 2,
data = mdata)
fit_Fmix_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fmix_PA'),
maxOrder = 2,
data = mdata)
fit_imperv <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~imperv'),
maxOrder = 2,
data = mdata)
fit_LFT_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~LFT_dist'),
maxOrder = 2,
data = mdata)
fit_POP_mean <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_mean'),
maxOrder = 2,
data = mdata)
fit_POP_median <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_median'),
maxOrder = 2,
data = mdata)
fit_hum <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~total_freq_humans'),
maxOrder = 2,
data = mdata)
fit <- fitList(fit_null, fit_WVF_dist, fit_WVF_PA, fit_Fdec_PA, fit_Fcon_PA,
fit_Fmix_PA, fit_imperv, fit_LFT_dist, fit_POP_mean,
fit_POP_median, fit_hum)
modSel(fit)
sink("frabbit_modSel_500.txt")
print(modSel(fit))
sink()
fit_frabbit_500 <- fit_null #is best model
sink("frabbit_fit_500_null.txt")
print(summary(fit_frabbit_500))
sink()
mdata <- fr2000
#first selection
fit_null <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~1'),
maxOrder = 2,
data = mdata)
fit_WVF_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_dist'),
maxOrder = 2,
data = mdata)
fit_WVF_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_PA'),
maxOrder = 2,
data = mdata)
fit_Fdec_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fdec_PA'),
maxOrder = 2,
data = mdata)
fit_Fcon_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fcon_PA'),
maxOrder = 2,
data = mdata)
fit_Fmix_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fmix_PA'),
maxOrder = 2,
data = mdata)
fit_imperv <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~imperv'),
maxOrder = 2,
data = mdata)
fit_LFT_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~LFT_dist'),
maxOrder = 2,
data = mdata)
fit_POP_mean <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_mean'),
maxOrder = 2,
data = mdata)
fit_POP_median <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_median'),
maxOrder = 2,
data = mdata)
fit_hum <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~total_freq_humans'),
maxOrder = 2,
data = mdata)
fit <- fitList(fit_null, fit_WVF_dist, fit_WVF_PA, fit_Fdec_PA, fit_Fcon_PA,
fit_Fmix_PA, fit_imperv, fit_LFT_dist, fit_POP_mean,
fit_POP_median, fit_hum)
modSel(fit)
sink("frabbit_modSel_2000.txt")
print(modSel(fit))
sink()
summary(fit_POP_mean)
summary(fit_null)
getwd()
setwd("~/Documents/GitHub/cameratrap_analysis")
###################START HERE IF WANTING TO USE DIRECTLY THE DETECTION MATRIX #############
###read directly the detection matrix RDS to avoid every step of this script up to here###
detection_matrix  <- readRDS("detection_matrix_revsites_28072022.rds")
###save species specific detection matrix into an object:
coyote <- detection_matrix$coyote %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
fox <- detection_matrix$fox %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
deer <- detection_matrix$deer %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
rabbit <- detection_matrix$rabbit %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
raccoon <- detection_matrix$raccoon %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
cat <- detection_matrix$cat %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
squirrel <- detection_matrix$squirrel %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
#### COVARIATES ########
##GENERATE COVARIATE dataframes for the model , make sure to readapt the site_names AND add human/dog presence####
# urlfile100="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/cov_100.csv"
# urlfile500="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/cov_500.csv"
# urlfile1000="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/cov_1000.csv"
# urlfile2000="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/cov_2000.csv"
# urlfilehumans="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/human_dog_df.csv"
human_dog_df <- read.csv("human_dog_df.csv") %>%
select(-1) %>%
select(site_name, total_freq_humans ,total_freq_dogs ) %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
imperv <- read.csv("cov_impervious.csv")
b100 <- read.csv("cov_100.csv")%>%
mutate(site_name = gsub("_", "", site_name))%>%
mutate(site_name = gsub("TUW0", "TUW", site_name))
b100 <- left_join(b100, human_dog_df, by="site_name")
b100 <- left_join(b100, imperv, by="site_name") %>%
arrange(site_name) %>%
dplyr::filter(site_name %in% unique(coyote$site_name)) ##filter those relevant for the analysis
b500 <- read.csv("cov_500.csv")%>%
mutate(site_name = gsub("_", "", site_name))%>%
mutate(site_name = gsub("TUW0", "TUW", site_name))
b500 <- left_join(b500, human_dog_df, by="site_name")
b500 <- left_join(b500, imperv, by="site_name") %>%
arrange(site_name) %>%
dplyr::filter(site_name %in% unique(coyote$site_name)) ##filter those relevant for the analysis
b2000 <- read.csv("cov_2000.csv")%>%
mutate(site_name = gsub("_", "", site_name))%>%
mutate(site_name = gsub("TUW0", "TUW", site_name))
b2000 <- left_join(b2000, human_dog_df, by="site_name")
b2000 <- left_join(b2000, imperv, by="site_name") %>%
arrange(site_name) %>%
dplyr::filter(site_name %in% unique(coyote$site_name)) ##filter those relevant for the analysis
##call occupancy covariates
#### here I've selected for only my covariates of interest
cov<- b100 %>%
select(WVF_dist, WVF_PA, Fdec_PA, Fcon_PA, Fmix_PA, imperv_100, POP_mean,
POP_median, LFT_dist, total_freq_humans) %>%
dplyr::rename(imperv = imperv_100)
cov100 <- as.data.frame(scale(cov))
cov<- b500 %>%
select(WVF_dist, WVF_PA, Fdec_PA, Fcon_PA, Fmix_PA, imperv_500, POP_mean,
POP_median, LFT_dist, total_freq_humans) %>%
dplyr::rename(imperv = imperv_500)
cov500 <- as.data.frame(scale(cov))
cov<- b2000 %>%
select(WVF_dist, WVF_PA, Fdec_PA, Fcon_PA, Fmix_PA, imperv_2000, POP_mean,
POP_median, LFT_dist, total_freq_humans) %>%
dplyr::rename(imperv = imperv_2000)
cov2000 <- as.data.frame(scale(cov))
##call detection covariate matrix here if using
d5 <- coyote %>% select()
d5 [, 1:11] <- "winter"
d5 [, 12:24] <- "spring"
d5 [, 25:37] <- "summer"
d5 [, 38:50] <- "fall"
d5 [, 51:53] <- "winter"
det_covs <- d5
det_list <- list(season = det_covs)
###MULTISPECIES OCCUPANCY
##create y_list for interaction of interest
y_list <- list(fox = as.matrix(fox %>% select(-1)),  ##toggle predator of interest
squirrel = as.matrix(squirrel %>% select(-1)))   ##toggle prey of interest
##create an unmarked frame for each buffer for clarity
fs100 <- unmarkedFrameOccuMulti(y = y_list,
siteCovs = cov100,
obsCovs = det_list)
fs500 <- unmarkedFrameOccuMulti(y = y_list,
siteCovs = cov500,
obsCovs = det_list)
fs2000 <- unmarkedFrameOccuMulti(y = y_list,
siteCovs = cov2000,
obsCovs = det_list)
getwd()
setwd("~/Documents/GitHub/cameratrap_analysis")
###################START HERE IF WANTING TO USE DIRECTLY THE DETECTION MATRIX #############
###read directly the detection matrix RDS to avoid every step of this script up to here###
detection_matrix  <- readRDS("detection_matrix_revsites_28072022.rds")
###save species specific detection matrix into an object:
coyote <- detection_matrix$coyote %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
fox <- detection_matrix$fox %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
deer <- detection_matrix$deer %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
rabbit <- detection_matrix$rabbit %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
raccoon <- detection_matrix$raccoon %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
cat <- detection_matrix$cat %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
squirrel <- detection_matrix$squirrel %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
#### COVARIATES ########
##GENERATE COVARIATE dataframes for the model , make sure to readapt the site_names AND add human/dog presence####
# urlfile100="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/cov_100.csv"
# urlfile500="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/cov_500.csv"
# urlfile1000="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/cov_1000.csv"
# urlfile2000="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/cov_2000.csv"
# urlfilehumans="https://raw.githubusercontent.com/germaincm/cameratrap_analysis/main/human_dog_df.csv"
human_dog_df <- read.csv("human_dog_df.csv") %>%
select(-1) %>%
select(site_name, total_freq_humans ,total_freq_dogs ) %>%
mutate(site_name = ifelse(site_name=="TUW35a", "TUW35", site_name))
imperv <- read.csv("cov_impervious.csv")
b100 <- read.csv("cov_100.csv")%>%
mutate(site_name = gsub("_", "", site_name))%>%
mutate(site_name = gsub("TUW0", "TUW", site_name))
b100 <- left_join(b100, human_dog_df, by="site_name")
b100 <- left_join(b100, imperv, by="site_name") %>%
arrange(site_name) %>%
dplyr::filter(site_name %in% unique(coyote$site_name)) ##filter those relevant for the analysis
b500 <- read.csv("cov_500.csv")%>%
mutate(site_name = gsub("_", "", site_name))%>%
mutate(site_name = gsub("TUW0", "TUW", site_name))
b500 <- left_join(b500, human_dog_df, by="site_name")
b500 <- left_join(b500, imperv, by="site_name") %>%
arrange(site_name) %>%
dplyr::filter(site_name %in% unique(coyote$site_name)) ##filter those relevant for the analysis
b2000 <- read.csv("cov_2000.csv")%>%
mutate(site_name = gsub("_", "", site_name))%>%
mutate(site_name = gsub("TUW0", "TUW", site_name))
b2000 <- left_join(b2000, human_dog_df, by="site_name")
b2000 <- left_join(b2000, imperv, by="site_name") %>%
arrange(site_name) %>%
dplyr::filter(site_name %in% unique(coyote$site_name)) ##filter those relevant for the analysis
##call occupancy covariates
#### here I've selected for only my covariates of interest
cov<- b100 %>%
select(WVF_dist, WVF_PA, Fdec_PA, Fcon_PA, Fmix_PA, imperv_100, POP_mean,
POP_median, LFT_dist, total_freq_humans) %>%
dplyr::rename(imperv = imperv_100)
cov100 <- as.data.frame(scale(cov))
cov<- b500 %>%
select(WVF_dist, WVF_PA, Fdec_PA, Fcon_PA, Fmix_PA, imperv_500, POP_mean,
POP_median, LFT_dist, total_freq_humans) %>%
dplyr::rename(imperv = imperv_500)
cov500 <- as.data.frame(scale(cov))
cov<- b2000 %>%
select(WVF_dist, WVF_PA, Fdec_PA, Fcon_PA, Fmix_PA, imperv_2000, POP_mean,
POP_median, LFT_dist, total_freq_humans) %>%
dplyr::rename(imperv = imperv_2000)
cov2000 <- as.data.frame(scale(cov))
##call detection covariate matrix here if using
d5 <- coyote %>% select()
d5 [, 1:11] <- "winter"
d5 [, 12:24] <- "spring"
d5 [, 25:37] <- "summer"
d5 [, 38:50] <- "fall"
d5 [, 51:53] <- "winter"
det_covs <- d5
det_list <- list(season = det_covs)
###MULTISPECIES OCCUPANCY
##create y_list for interaction of interest
y_list <- list(fox = as.matrix(fox %>% select(-1)),  ##toggle predator of interest
squirrel = as.matrix(squirrel %>% select(-1)))   ##toggle prey of interest
##create an unmarked frame for each buffer for clarity
fs100 <- unmarkedFrameOccuMulti(y = y_list,
siteCovs = cov100,
obsCovs = det_list)
fs500 <- unmarkedFrameOccuMulti(y = y_list,
siteCovs = cov500,
obsCovs = det_list)
fs2000 <- unmarkedFrameOccuMulti(y = y_list,
siteCovs = cov2000,
obsCovs = det_list)
mdata <- fs100
#first selection
fit_null <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~1'),
maxOrder = 2,
data = mdata)
fit_WVF_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_dist'),
maxOrder = 2,
data = mdata)
fit_WVF_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_PA'),
maxOrder = 2,
data = mdata)
fit_Fdec_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fdec_PA'),
maxOrder = 2,
data = mdata)
fit_Fcon_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fcon_PA'),
maxOrder = 2,
data = mdata)
fit_Fmix_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fmix_PA'),
maxOrder = 2,
data = mdata)
fit_imperv <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~imperv'),
maxOrder = 2,
data = mdata)
fit_LFT_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~LFT_dist'),
maxOrder = 2,
data = mdata)
fit_POP_mean <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_mean'),
maxOrder = 2,
data = mdata)
fit_POP_median <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_median'),
maxOrder = 2,
data = mdata)
fit_hum <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~total_freq_humans'),
maxOrder = 2,
data = mdata)
fit <- fitList(fit_null, fit_WVF_dist, fit_WVF_PA, fit_Fdec_PA, fit_Fcon_PA,
fit_Fmix_PA, fit_imperv, fit_LFT_dist, fit_POP_mean,
fit_POP_median, fit_hum)
modSel(fit)
sink("fsquirrel_modSel_100.txt")
print(modSel(fit))
sink()
summary(fit_Fdec_PA)
fit_fsquirrel_100 <- fit_null #is best model
sink("fsquirrel_fit_100_null.txt")
print(summary(fit_fsquirrel_100))
sink()
mdata <- fs500
#first selection
fit_null <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~1'),
maxOrder = 2,
data = mdata)
fit_WVF_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_dist'),
maxOrder = 2,
data = mdata)
fit_WVF_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_PA'),
maxOrder = 2,
data = mdata)
fit_Fdec_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fdec_PA'),
maxOrder = 2,
data = mdata)
fit_Fcon_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fcon_PA'),
maxOrder = 2,
data = mdata)
fit_Fmix_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fmix_PA'),
maxOrder = 2,
data = mdata)
fit_imperv <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~imperv'),
maxOrder = 2,
data = mdata)
fit_LFT_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~LFT_dist'),
maxOrder = 2,
data = mdata)
fit_POP_mean <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_mean'),
maxOrder = 2,
data = mdata)
fit_POP_median <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_median'),
maxOrder = 2,
data = mdata)
fit_hum <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~total_freq_humans'),
maxOrder = 2,
data = mdata)
fit <- fitList(fit_null, fit_WVF_dist, fit_WVF_PA, fit_Fdec_PA, fit_Fcon_PA,
fit_Fmix_PA, fit_imperv, fit_LFT_dist, fit_POP_mean,
fit_POP_median, fit_hum)
modSel(fit)
sink("fsquirrel_modSel_500.txt")
print(modSel(fit))
sink()
mdata <- fs2000
#first selection
fit_null <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~1'),
maxOrder = 2,
data = mdata)
fit_WVF_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_dist'),
maxOrder = 2,
data = mdata)
fit_WVF_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~WVF_PA'),
maxOrder = 2,
data = mdata)
fit_Fdec_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fdec_PA'),
maxOrder = 2,
data = mdata)
fit_Fcon_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fcon_PA'),
maxOrder = 2,
data = mdata)
fit_Fmix_PA <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~Fmix_PA'),
maxOrder = 2,
data = mdata)
fit_imperv <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~imperv'),
maxOrder = 2,
data = mdata)
fit_LFT_dist <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~LFT_dist'),
maxOrder = 2,
data = mdata)
fit_POP_mean <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_mean'),
maxOrder = 2,
data = mdata)
fit_POP_median <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~POP_median'),
maxOrder = 2,
data = mdata)
fit_hum <- occuMulti(detformulas = c('~season', '~season'),
stateformulas = c('~1', '~1', '~total_freq_humans'),
maxOrder = 2,
data = mdata)
fit <- fitList(fit_null, fit_WVF_dist, fit_WVF_PA, fit_Fdec_PA, fit_Fcon_PA,
fit_Fmix_PA, fit_imperv, fit_LFT_dist, fit_POP_mean,
fit_POP_median, fit_hum)
modSel(fit)
sink("fsquirrel_modSel_2000.txt")
print(modSel(fit))
sink()
summary(fit_Fdec_PA)
summary(fit_Fcon_PA)
source("~/Documents/GitHub/cameratrap_analysis/MSOM fox-squirrel.R", echo=TRUE)
fit_fsquirrel_2000 <- fit_Fdec_PA #is best model
sink("fsquirrel_fit_2000.txt")
print(summary(fit_fsquirrel_2000))
sink()
